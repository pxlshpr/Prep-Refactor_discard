<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>top-level-items</key>
	<array>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>11</string>
					<key>EndingLineNumber</key>
					<string>130</string>
					<key>LocationEncoding</key>
					<string>1</string>
					<key>StartingColumnNumber</key>
					<string>2</string>
					<key>StartingLineNumber</key>
					<string>116</string>
					<key>Timestamp</key>
					<string>710062059.950792</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>home-directory</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Developer/wip/Prep/Prep/Views/Log/DayView.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        logger.debug("Fetching meals...")
//        let meals = fetchMeals(on: date, context: context)
//        self.meals = meals
//        logger.debug("... fetched \(meals.count) meals")
//        
//        Task.detached {
//            /// Doing this crashes if we then try to add a meal, getting the following error:
//            /// "The model configuration used to open the store is incompatible with the one that was used to create the store."
//            ///
////            let meals = try await FetchMealStore.shared.meals(date: date)
////            await MainActor.run {
////                self.meals = meals
////                logger.debug("... fetched \(meals.count) meals")
////            }
//        }</string>
				<key>leading</key>
				<string>
    func appeared() {
//</string>
				<key>trailing</key>
				<string>
    }
    
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>15</string>
					<key>EndingLineNumber</key>
					<string>121</string>
					<key>LocationEncoding</key>
					<string>1</string>
					<key>StartingColumnNumber</key>
					<string>10</string>
					<key>StartingLineNumber</key>
					<string>121</string>
					<key>Timestamp</key>
					<string>710062285.438108</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>home-directory</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Developer/wip/Prep/Prep/Views/MealItemForm/ItemForm.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>guard</string>
				<key>leading</key>
				<string>    
    func tappedSave() {
//        </string>
				<key>trailing</key>
				<string> let mealID = meal?.id, let food else { return }
//        
//        Haptics.successFeedback()
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>9</string>
					<key>EndingLineNumber</key>
					<string>31</string>
					<key>LocationEncoding</key>
					<string>1</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>18</string>
					<key>Timestamp</key>
					<string>710062298.974228</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>home-directory</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Developer/wip/Prep/Prep/Views/Log/FoodPickerModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>//        task?.cancel()
//        task = Task {
//            do {
//                let recents = try await SearchStore.shared.recents()
//                try Task.checkCancellation()
//                logger.debug("Setting \(recents.count) recents")
//                await MainActor.run {
//                    self.foodResults = recents
//                }
//                
//            } catch {
//                logger.debug("Error during recents fetch: \(error, privacy: .public)")
//            }
//        }</string>
				<key>leading</key>
				<string>    
    func fetchRecents() {
</string>
				<key>trailing</key>
				<string>
    }
    
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>11</string>
					<key>EndingLineNumber</key>
					<string>52</string>
					<key>LocationEncoding</key>
					<string>1</string>
					<key>StartingColumnNumber</key>
					<string>2</string>
					<key>StartingLineNumber</key>
					<string>39</string>
					<key>Timestamp</key>
					<string>710062309.124279</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>home-directory</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Developer/wip/Prep/Prep/Views/Log/FoodPickerModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        task?.cancel()
//        task = Task {
//            do {
//                let results = try await SearchStore.shared.search(text)
//                try Task.checkCancellation()
//                logger.debug("Setting \(results.count) results")
//                await MainActor.run {
//                    self.foodResults = results
//                }
//                
//            } catch {
//                logger.debug("Error during search: \(error, privacy: .public)")
//            }
//        }</string>
				<key>leading</key>
				<string>    
    func search(_ text: String) {
//</string>
				<key>trailing</key>
				<string>
    }
}
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingLineNumber</key>
					<string>60</string>
					<key>StartingLineNumber</key>
					<string>60</string>
					<key>Timestamp</key>
					<string>710106244.183187</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Prep/Views/ItemForm2.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>//        let descriptor = FetchDescriptor&lt;FoodEntity&gt;(predicate: #Predicate {
</string>
				<key>leading</key>
				<string>        //TODO: Store the last used quantity in the Food itself to save ourselves a fetch
//        guard let foodResult else { return }
</string>
				<key>trailing</key>
				<string>//            $0.uuid == foodResult.uuid
//        })
//        do {
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingLineNumber</key>
					<string>103</string>
					<key>StartingLineNumber</key>
					<string>103</string>
					<key>Timestamp</key>
					<string>710106244.183329</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Prep/Views/ItemForm2.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>//        guard
</string>
				<key>leading</key>
				<string>    var scaleFactor: Double {
        0
</string>
				<key>trailing</key>
				<string>//            let food,
//            let quantity = food.quantity(for: foodValue)
//        else { return 0 }
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingLineNumber</key>
					<string>128</string>
					<key>StartingLineNumber</key>
					<string>128</string>
					<key>Timestamp</key>
					<string>710106244.183502</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Prep/Views/ItemForm2.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>//        if let foodItem {
</string>
				<key>leading</key>
				<string>//        dismiss()
        
</string>
				<key>trailing</key>
				<string>//            /// Update
//        } else {
//            
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingLineNumber</key>
					<string>209</string>
					<key>StartingLineNumber</key>
					<string>209</string>
					<key>Timestamp</key>
					<string>710106244.183387</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Prep/Views/ItemForm2.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>//            return ""
</string>
				<key>leading</key>
				<string>        ""
//        guard let nutrientValue = food?.value(for: nutrient) else {
</string>
				<key>trailing</key>
				<string>//        }
//        let scaled = nutrientValue.value * scaleFactor
//        return "\(scaled.cleanAmount) \(nutrientValue.unit.abbreviation)"
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingLineNumber</key>
					<string>264</string>
					<key>StartingLineNumber</key>
					<string>264</string>
					<key>Timestamp</key>
					<string>710106244.1832629</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Prep/Views/ItemForm2.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>//                            .bold(food?.primaryMacro == nutrient.macro)
</string>
				<key>leading</key>
				<string>//                            .foregroundStyle(Color(.secondaryLabel))
                            .foregroundColor(nutrient.macro!.textColor(for: colorScheme))
</string>
				<key>trailing</key>
				<string>                    }
                }
            }
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingLineNumber</key>
					<string>108</string>
					<key>StartingLineNumber</key>
					<string>108</string>
					<key>Timestamp</key>
					<string>710169056.017866</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Prep/Views/Log/DayView.AddFoodCell.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        let energy = meal.energy(in: .kcal)
</string>
				<key>leading</key>
				<string>    
    var energyText: some View {
</string>
				<key>trailing</key>
				<string>        let string = NumberFormatter.energyValue.string(for: energy) ?? ""
        return Text("\(string)")
    }
</string>
			</dict>
			<key>title</key>
			<string>Use user energy unit here.</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingLineNumber</key>
					<string>112</string>
					<key>StartingLineNumber</key>
					<string>112</string>
					<key>Timestamp</key>
					<string>710159312.90481</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Prep/Backend/Models/Meal.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>            $0 + $1.calculateEnergy(in: unit)
</string>
				<key>leading</key>
				<string>    func calculateEnergy(in unit: EnergyUnit) -&gt; Double {
        foodItems.reduce(0) {
</string>
				<key>trailing</key>
				<string>        }
    }
    
</string>
			</dict>
			<key>title</key>
			<string>Ensure that all values are converted to unit provided</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingLineNumber</key>
					<string>90</string>
					<key>StartingLineNumber</key>
					<string>90</string>
					<key>Timestamp</key>
					<string>710189051.884046</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Prep/Backend/Stores/FoodItemsStore.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        entity.energyUnit = energyUnit
</string>
				<key>leading</key>
				<string>        /// Set the energy unit (this is arbitrary as we can always display it in the unit we want)
        let energyUnit: EnergyUnit = .kcal
</string>
				<key>trailing</key>
				<string>        
        /// Compute the nutrients
        let energy = food.calculateEnergy(in: energyUnit, for: amount)
</string>
			</dict>
			<key>title</key>
			<string>Use User's default EnergyUnit here</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
	</array>
</dict>
</plist>
