<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>top-level-items</key>
	<array>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>11</string>
					<key>EndingLineNumber</key>
					<string>130</string>
					<key>LocationEncoding</key>
					<string>1</string>
					<key>StartingColumnNumber</key>
					<string>2</string>
					<key>StartingLineNumber</key>
					<string>116</string>
					<key>Timestamp</key>
					<string>710062059.950792</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>home-directory</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Developer/wip/Prep/Prep/Views/Log/DayView.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        logger.debug("Fetching meals...")
//        let meals = fetchMeals(on: date, context: context)
//        self.meals = meals
//        logger.debug("... fetched \(meals.count) meals")
//        
//        Task.detached {
//            /// Doing this crashes if we then try to add a meal, getting the following error:
//            /// "The model configuration used to open the store is incompatible with the one that was used to create the store."
//            ///
////            let meals = try await FetchMealStore.shared.meals(date: date)
////            await MainActor.run {
////                self.meals = meals
////                logger.debug("... fetched \(meals.count) meals")
////            }
//        }</string>
				<key>leading</key>
				<string>
    func appeared() {
//</string>
				<key>trailing</key>
				<string>
    }
    
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>15</string>
					<key>EndingLineNumber</key>
					<string>121</string>
					<key>LocationEncoding</key>
					<string>1</string>
					<key>StartingColumnNumber</key>
					<string>10</string>
					<key>StartingLineNumber</key>
					<string>121</string>
					<key>Timestamp</key>
					<string>710062285.438108</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>home-directory</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Developer/wip/Prep/Prep/Views/MealItemForm/ItemForm.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>guard</string>
				<key>leading</key>
				<string>    
    func tappedSave() {
//        </string>
				<key>trailing</key>
				<string> let mealID = meal?.id, let food else { return }
//        
//        Haptics.successFeedback()
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>9</string>
					<key>EndingLineNumber</key>
					<string>31</string>
					<key>LocationEncoding</key>
					<string>1</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>18</string>
					<key>Timestamp</key>
					<string>710062298.974228</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>home-directory</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Developer/wip/Prep/Prep/Views/Log/FoodPickerModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>//        task?.cancel()
//        task = Task {
//            do {
//                let recents = try await SearchStore.shared.recents()
//                try Task.checkCancellation()
//                logger.debug("Setting \(recents.count) recents")
//                await MainActor.run {
//                    self.foodResults = recents
//                }
//                
//            } catch {
//                logger.debug("Error during recents fetch: \(error, privacy: .public)")
//            }
//        }</string>
				<key>leading</key>
				<string>    
    func fetchRecents() {
</string>
				<key>trailing</key>
				<string>
    }
    
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>11</string>
					<key>EndingLineNumber</key>
					<string>52</string>
					<key>LocationEncoding</key>
					<string>1</string>
					<key>StartingColumnNumber</key>
					<string>2</string>
					<key>StartingLineNumber</key>
					<string>39</string>
					<key>Timestamp</key>
					<string>710062309.124279</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>home-directory</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Developer/wip/Prep/Prep/Views/Log/FoodPickerModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        task?.cancel()
//        task = Task {
//            do {
//                let results = try await SearchStore.shared.search(text)
//                try Task.checkCancellation()
//                logger.debug("Setting \(results.count) results")
//                await MainActor.run {
//                    self.foodResults = results
//                }
//                
//            } catch {
//                logger.debug("Error during search: \(error, privacy: .public)")
//            }
//        }</string>
				<key>leading</key>
				<string>    
    func search(_ text: String) {
//</string>
				<key>trailing</key>
				<string>
    }
}
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>35</string>
					<key>EndingLineNumber</key>
					<string>56</string>
					<key>LocationEncoding</key>
					<string>1</string>
					<key>StartingColumnNumber</key>
					<string>31</string>
					<key>StartingLineNumber</key>
					<string>56</string>
					<key>Timestamp</key>
					<string>710088277.801403</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Prep/Views/ItemForm2.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>else</string>
				<key>leading</key>
				<string>
    func fetchFood() {
//        guard let foodResult </string>
				<key>trailing</key>
				<string> { return }
//        let descriptor = FetchDescriptor&lt;FoodEntity&gt;(predicate: #Predicate {
//            $0.uuid == foodResult.uuid
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingLineNumber</key>
					<string>100</string>
					<key>StartingLineNumber</key>
					<string>100</string>
					<key>Timestamp</key>
					<string>710088290.651768</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Prep/Views/ItemForm2.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>//        guard
</string>
				<key>leading</key>
				<string>    var scaleFactor: Double {
        0
</string>
				<key>trailing</key>
				<string>//            let food,
//            let quantity = food.quantity(for: foodValue)
//        else { return 0 }
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>25</string>
					<key>EndingLineNumber</key>
					<string>125</string>
					<key>LocationEncoding</key>
					<string>1</string>
					<key>StartingColumnNumber</key>
					<string>17</string>
					<key>StartingLineNumber</key>
					<string>125</string>
					<key>Timestamp</key>
					<string>710088311.567569</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Prep/Views/ItemForm2.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>foodItem</string>
				<key>leading</key>
				<string>//        dismiss()
        
//        if let </string>
				<key>trailing</key>
				<string> {
//            /// Update
//        } else {
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>15</string>
					<key>EndingLineNumber</key>
					<string>205</string>
					<key>LocationEncoding</key>
					<string>1</string>
					<key>StartingColumnNumber</key>
					<string>10</string>
					<key>StartingLineNumber</key>
					<string>205</string>
					<key>Timestamp</key>
					<string>710088327.654667</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Prep/Views/ItemForm2.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>guard</string>
				<key>leading</key>
				<string>    func valueString(for nutrient: Nutrient) -&gt; String {
        ""
//        </string>
				<key>trailing</key>
				<string> let nutrientValue = food?.value(for: nutrient) else {
//            return ""
//        }
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>66</string>
					<key>EndingLineNumber</key>
					<string>261</string>
					<key>LocationEncoding</key>
					<string>1</string>
					<key>StartingColumnNumber</key>
					<string>58</string>
					<key>StartingLineNumber</key>
					<string>261</string>
					<key>Timestamp</key>
					<string>710088341.468292</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Prep/Views/ItemForm2.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>nutrient</string>
				<key>leading</key>
				<string>//                            .foregroundStyle(Color(.secondaryLabel))
                            .foregroundColor(nutrient.macro!.textColor(for: colorScheme))
//                            .bold(food?.primaryMacro == </string>
				<key>trailing</key>
				<string>.macro)
                    }
                }
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>33</string>
					<key>EndingLineNumber</key>
					<string>366</string>
					<key>LocationEncoding</key>
					<string>1</string>
					<key>StartingColumnNumber</key>
					<string>29</string>
					<key>StartingLineNumber</key>
					<string>366</string>
					<key>Timestamp</key>
					<string>710088363.036219</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Prep/Views/ItemForm2.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>food</string>
				<key>leading</key>
				<string>        var sizesSections: some View {
            EmptyView()
//            if let sizes = </string>
				<key>trailing</key>
				<string>?.formSizes, !sizes.isEmpty {
//                Section("Sizes") {
//                    sizesContent(sizes)
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingLineNumber</key>
					<string>418</string>
					<key>StartingLineNumber</key>
					<string>418</string>
					<key>Timestamp</key>
					<string>710088375.984091</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Prep/Views/ItemForm2.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>//            if food?.canBeMeasuredInVolume == true {
</string>
				<key>leading</key>
				<string>        var volumesMenu: some View {
            EmptyView()
</string>
				<key>trailing</key>
				<string>//                Menu {
//                    volumesContent
//                } label: {
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>44</string>
					<key>EndingLineNumber</key>
					<string>387</string>
					<key>LocationEncoding</key>
					<string>1</string>
					<key>StartingColumnNumber</key>
					<string>23</string>
					<key>StartingLineNumber</key>
					<string>387</string>
					<key>Timestamp</key>
					<string>710088381.786026</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Prep/Views/ItemForm2.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>canBeMeasuredInWeight</string>
				<key>leading</key>
				<string>        var weightsMenu: some View {
            EmptyView()
//            if food?.</string>
				<key>trailing</key>
				<string> == true {
//                Menu {
//                    weightsContent
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>25</string>
					<key>EndingLineNumber</key>
					<string>430</string>
					<key>LocationEncoding</key>
					<string>1</string>
					<key>StartingColumnNumber</key>
					<string>21</string>
					<key>StartingLineNumber</key>
					<string>430</string>
					<key>Timestamp</key>
					<string>710088391.986284</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Prep/Views/ItemForm2.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>food</string>
				<key>leading</key>
				<string>        var menuContents: some View {
            EmptyView()
//            if let </string>
				<key>trailing</key>
				<string> {
//                if food.onlySupportsWeights {
//                    weightsContent
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingLineNumber</key>
					<string>10</string>
					<key>StartingLineNumber</key>
					<string>10</string>
					<key>Timestamp</key>
					<string>710091529.293092</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Prep/Backend/Models/FoodItem2.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>    var badgeWidth: CGFloat
</string>
				<key>leading</key>
				<string>    var mealID: UUID?

</string>
				<key>trailing</key>
				<string>    var sortPosition: Int
    
    var eatenAt: Date?
</string>
			</dict>
			<key>title</key>
			<string>Store energy, carb, etc totals here so we don't have to keep recalculating when displaying</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingLineNumber</key>
					<string>41</string>
					<key>StartingLineNumber</key>
					<string>41</string>
					<key>Timestamp</key>
					<string>710092040.212009</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Prep/Backend/Entities/FoodEntity2.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        self.emoji = legacy.emoji
</string>
				<key>leading</key>
				<string>        self.init(context: context)
        self.id = UUID(uuidString: legacy.id)
</string>
				<key>trailing</key>
				<string>        self.name = legacy.name
        self.detail = legacy.detail
        self.brand = legacy.brand
</string>
			</dict>
			<key>title</key>
			<string>Add dataset food id</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingLineNumber</key>
					<string>42</string>
					<key>StartingLineNumber</key>
					<string>42</string>
					<key>Timestamp</key>
					<string>710092040.2124161</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Prep/Backend/Entities/FoodEntity2.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        self.name = legacy.name
</string>
				<key>leading</key>
				<string>        self.id = UUID(uuidString: legacy.id)
        self.emoji = legacy.emoji
</string>
				<key>trailing</key>
				<string>        self.detail = legacy.detail
        self.brand = legacy.brand
        self.amount = legacy.amount.foodValue
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
	</array>
</dict>
</plist>
