<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>top-level-items</key>
	<array>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>11</string>
					<key>EndingLineNumber</key>
					<string>130</string>
					<key>LocationEncoding</key>
					<string>1</string>
					<key>StartingColumnNumber</key>
					<string>2</string>
					<key>StartingLineNumber</key>
					<string>116</string>
					<key>Timestamp</key>
					<string>710062059.950792</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>home-directory</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Developer/wip/Prep/Prep/Views/Log/DayView.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        logger.debug("Fetching meals...")
//        let meals = fetchMeals(on: date, context: context)
//        self.meals = meals
//        logger.debug("... fetched \(meals.count) meals")
//        
//        Task.detached {
//            /// Doing this crashes if we then try to add a meal, getting the following error:
//            /// "The model configuration used to open the store is incompatible with the one that was used to create the store."
//            ///
////            let meals = try await FetchMealStore.shared.meals(date: date)
////            await MainActor.run {
////                self.meals = meals
////                logger.debug("... fetched \(meals.count) meals")
////            }
//        }</string>
				<key>leading</key>
				<string>
    func appeared() {
//</string>
				<key>trailing</key>
				<string>
    }
    
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>15</string>
					<key>EndingLineNumber</key>
					<string>121</string>
					<key>LocationEncoding</key>
					<string>1</string>
					<key>StartingColumnNumber</key>
					<string>10</string>
					<key>StartingLineNumber</key>
					<string>121</string>
					<key>Timestamp</key>
					<string>710062285.438108</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>home-directory</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Developer/wip/Prep/Prep/Views/MealItemForm/ItemForm.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>guard</string>
				<key>leading</key>
				<string>    
    func tappedSave() {
//        </string>
				<key>trailing</key>
				<string> let mealID = meal?.id, let food else { return }
//        
//        Haptics.successFeedback()
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>9</string>
					<key>EndingLineNumber</key>
					<string>31</string>
					<key>LocationEncoding</key>
					<string>1</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>18</string>
					<key>Timestamp</key>
					<string>710062298.974228</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>home-directory</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Developer/wip/Prep/Prep/Views/Log/FoodPickerModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>//        task?.cancel()
//        task = Task {
//            do {
//                let recents = try await SearchStore.shared.recents()
//                try Task.checkCancellation()
//                logger.debug("Setting \(recents.count) recents")
//                await MainActor.run {
//                    self.foodResults = recents
//                }
//                
//            } catch {
//                logger.debug("Error during recents fetch: \(error, privacy: .public)")
//            }
//        }</string>
				<key>leading</key>
				<string>    
    func fetchRecents() {
</string>
				<key>trailing</key>
				<string>
    }
    
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>11</string>
					<key>EndingLineNumber</key>
					<string>52</string>
					<key>LocationEncoding</key>
					<string>1</string>
					<key>StartingColumnNumber</key>
					<string>2</string>
					<key>StartingLineNumber</key>
					<string>39</string>
					<key>Timestamp</key>
					<string>710062309.124279</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>home-directory</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Developer/wip/Prep/Prep/Views/Log/FoodPickerModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        task?.cancel()
//        task = Task {
//            do {
//                let results = try await SearchStore.shared.search(text)
//                try Task.checkCancellation()
//                logger.debug("Setting \(results.count) results")
//                await MainActor.run {
//                    self.foodResults = results
//                }
//                
//            } catch {
//                logger.debug("Error during search: \(error, privacy: .public)")
//            }
//        }</string>
				<key>leading</key>
				<string>    
    func search(_ text: String) {
//</string>
				<key>trailing</key>
				<string>
    }
}
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
	</array>
</dict>
</plist>
